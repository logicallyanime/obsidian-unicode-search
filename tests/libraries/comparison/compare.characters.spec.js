import { compareUsedCharacters } from "../../../src/libraries/comparison/compareUsedCharacters";
test("character with codepoint `a` is before character with codepoint `b`", () => {
    expect(compareUsedCharacters({
        codepoint: "a",
        name: "",
        category: "Ll",
    }, {
        codepoint: "b",
        name: "",
        category: "Ll",
    }, new Date(0))).toBe(-1);
});
test("character with `use` is before character without", () => {
    expect(compareUsedCharacters({
        codepoint: " ",
        name: "b",
        category: "Ll",
        lastUsed: new Date(2),
        firstUsed: new Date(1),
        useCount: 1
    }, {
        codepoint: " ",
        name: "a",
        category: "Ll",
    }, new Date(0))).toBe(-1);
});
test("characters with same `name` and `use` are equal", () => {
    expect(compareUsedCharacters({
        codepoint: " ",
        name: "name",
        category: "Ll",
        firstUsed: new Date(1),
        lastUsed: new Date(1),
        useCount: 1
    }, {
        codepoint: " ",
        name: "name",
        category: "Ll",
        firstUsed: new Date(1),
        lastUsed: new Date(1),
        useCount: 1
    }, new Date(0))).toBe(0);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFyZS5jaGFyYWN0ZXJzLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21wYXJlLmNoYXJhY3RlcnMuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSx5REFBeUQsQ0FBQztBQUU5RixJQUFJLENBQ0EscUVBQXFFLEVBQ3JFLEdBQUcsRUFBRTtJQUNELE1BQU0sQ0FBQyxxQkFBcUIsQ0FDeEI7UUFDSSxTQUFTLEVBQUUsR0FBRztRQUNkLElBQUksRUFBRSxFQUFFO1FBQ1IsUUFBUSxFQUFFLElBQUk7S0FDakIsRUFDRDtRQUNJLFNBQVMsRUFBRSxHQUFHO1FBQ2QsSUFBSSxFQUFFLEVBQUU7UUFDUixRQUFRLEVBQUUsSUFBSTtLQUNqQixFQUNELElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNkLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNmLENBQUMsQ0FDSixDQUFBO0FBRUQsSUFBSSxDQUNBLGtEQUFrRCxFQUNsRCxHQUFHLEVBQUU7SUFDRCxNQUFNLENBQUMscUJBQXFCLENBQ3hCO1FBQ0ksU0FBUyxFQUFFLEdBQUc7UUFDZCxJQUFJLEVBQUUsR0FBRztRQUNULFFBQVEsRUFBRSxJQUFJO1FBQzFCLFFBQVEsRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDVCxTQUFTLEVBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLFFBQVEsRUFBRSxDQUFDO0tBQ0YsRUFDRDtRQUNJLFNBQVMsRUFBRSxHQUFHO1FBQ2QsSUFBSSxFQUFFLEdBQUc7UUFDVCxRQUFRLEVBQUUsSUFBSTtLQUNqQixFQUNELElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNkLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNmLENBQUMsQ0FDSixDQUFBO0FBRUQsSUFBSSxDQUNBLGlEQUFpRCxFQUNqRCxHQUFHLEVBQUU7SUFDRCxNQUFNLENBQUMscUJBQXFCLENBQ3hCO1FBQ0ksU0FBUyxFQUFFLEdBQUc7UUFDZCxJQUFJLEVBQUUsTUFBTTtRQUNaLFFBQVEsRUFBRSxJQUFJO1FBQzFCLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDdEIsUUFBUSxFQUFFLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyQixRQUFRLEVBQUUsQ0FBQztLQUNGLEVBQ0Q7UUFDSSxTQUFTLEVBQUUsR0FBRztRQUNkLElBQUksRUFBRSxNQUFNO1FBQ1osUUFBUSxFQUFFLElBQUk7UUFDMUIsU0FBUyxFQUFFLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN0QixRQUFRLEVBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLFFBQVEsRUFBRSxDQUFDO0tBQ0YsRUFDRCxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDZCxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2QsQ0FBQyxDQUNKLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NvbXBhcmVVc2VkQ2hhcmFjdGVyc30gZnJvbSBcIi4uLy4uLy4uL3NyYy9saWJyYXJpZXMvY29tcGFyaXNvbi9jb21wYXJlVXNlZENoYXJhY3RlcnNcIjtcblxudGVzdChcbiAgICBcImNoYXJhY3RlciB3aXRoIGNvZGVwb2ludCBgYWAgaXMgYmVmb3JlIGNoYXJhY3RlciB3aXRoIGNvZGVwb2ludCBgYmBcIixcbiAgICAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChjb21wYXJlVXNlZENoYXJhY3RlcnMoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29kZXBvaW50OiBcImFcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcIkxsXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvZGVwb2ludDogXCJiXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJMbFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5ldyBEYXRlKDApLFxuICAgICAgICApKS50b0JlKC0xKVxuICAgIH1cbilcblxudGVzdChcbiAgICBcImNoYXJhY3RlciB3aXRoIGB1c2VgIGlzIGJlZm9yZSBjaGFyYWN0ZXIgd2l0aG91dFwiLFxuICAgICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGNvbXBhcmVVc2VkQ2hhcmFjdGVycyhcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2RlcG9pbnQ6IFwiIFwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYlwiLFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcIkxsXCIsXG5cdFx0XHRcdGxhc3RVc2VkOiBuZXcgRGF0ZSgyKSxcbiAgICAgICAgICAgICAgICBmaXJzdFVzZWQ6IG5ldyBEYXRlKDEpLFxuXHRcdFx0XHR1c2VDb3VudDogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2RlcG9pbnQ6IFwiIFwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYVwiLFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcIkxsXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV3IERhdGUoMCksXG4gICAgICAgICkpLnRvQmUoLTEpXG4gICAgfVxuKVxuXG50ZXN0KFxuICAgIFwiY2hhcmFjdGVycyB3aXRoIHNhbWUgYG5hbWVgIGFuZCBgdXNlYCBhcmUgZXF1YWxcIixcbiAgICAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChjb21wYXJlVXNlZENoYXJhY3RlcnMoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29kZXBvaW50OiBcIiBcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm5hbWVcIixcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogXCJMbFwiLFxuXHRcdFx0XHRmaXJzdFVzZWQ6IG5ldyBEYXRlKDEpLFxuXHRcdFx0XHRsYXN0VXNlZDogbmV3IERhdGUoMSksXG5cdFx0XHRcdHVzZUNvdW50OiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvZGVwb2ludDogXCIgXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJuYW1lXCIsXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IFwiTGxcIixcblx0XHRcdFx0Zmlyc3RVc2VkOiBuZXcgRGF0ZSgxKSxcblx0XHRcdFx0bGFzdFVzZWQ6IG5ldyBEYXRlKDEpLFxuXHRcdFx0XHR1c2VDb3VudDogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5ldyBEYXRlKDApXG4gICAgICAgICkpLnRvQmUoMClcbiAgICB9XG4pXG4iXX0=