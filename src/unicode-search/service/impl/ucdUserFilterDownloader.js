import { __awaiter } from "tslib";
import { request } from "obsidian";
import { parse } from "papaparse";
import { UnicodeSearchError } from "../../errors/unicodeSearchError";
import { mergeIntervals } from "../../../libraries/helpers/mergeIntervals";
import { codepointIn } from "../../../libraries/helpers/codePointIn";
export class UcdUserFilterDownloader {
    constructor(settingsStore) {
        this.settingsStore = settingsStore;
        this.config = {
            delimiter: ";",
            header: false,
            transformHeader: undefined,
            dynamicTyping: false,
            fastMode: true,
        };
    }
    download() {
        return __awaiter(this, void 0, void 0, function* () {
            const unicodeVersion = "14.0.0";
            const unicodeData = yield request(`https://www.unicode.org/Public/${unicodeVersion}/ucd/UnicodeData.txt`);
            const parsed = yield this.transformToCharacters(unicodeData);
            const filtered = yield this.filterCharacters(parsed);
            return filtered.map(intoUnicodeCodepoint);
        });
    }
    filterCharacters(parsed) {
        return __awaiter(this, void 0, void 0, function* () {
            const filter = yield this.settingsStore.getFilter();
            const includedBlocks = mergeIntervals(filter.planes
                .flatMap(p => p.blocks)
                .filter(b => b.included));
            const includedCategories = filter.categoryGroups
                .flatMap(p => p.categories)
                .filter(c => c.included)
                .map(c => c.abbreviation);
            return parsed.filter(char => !containsNullValues(char)
                && includedInBlocks(char, includedBlocks)
                && categoryIncluded(char, includedCategories));
        });
    }
    transformToCharacters(csvString) {
        return new Promise((resolve, reject) => {
            const completeFn = (results) => {
                if (results.errors.length !== 0) {
                    reject(new UnicodeSearchError("Error while parsing data from Unicode Character Database"));
                }
                const parsedCharacters = results.data
                    .map((row) => ({
                    codepoint: parseInt(row[0], 16),
                    name: row[1],
                    category: row[2],
                }));
                resolve(parsedCharacters);
            };
            const configuration = Object.assign(Object.assign({}, this.config), { worker: true, complete: results => completeFn(results) });
            parse(csvString, configuration);
        });
    }
}
function containsNullValues(char) {
    return char == null
        || char.name == null
        || char.codepoint == null
        || char.category == null;
}
function includedInBlocks(character, includedBlocks) {
    return includedBlocks.some((block) => codepointIn(character.codepoint, block));
}
function categoryIncluded(character, includedCategories) {
    return includedCategories.some((category) => character.category === category);
}
function intoUnicodeCodepoint(char) {
    return {
        codepoint: String.fromCodePoint(char.codepoint),
        name: char.name.toLowerCase(),
        category: char.category
    };
}
//# sourceMappingURL=data:application/json;base64,